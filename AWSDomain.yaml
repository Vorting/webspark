 # CloudFormation Network Layer: VPC, Subnets + RouteTables, Internet + NAT Gateways
Metadata:
 AWS::CloudFormation::Interface: 
    ParameterGroups: 
      - 
        Label: 
          default: "Network Configuration"
        Parameters: 
          - Environment
          - VPCBlock
          - VPCBlock2
      -
        Label:
          default: "Subnets CIDR Blocks"
        Parameters:
          - PublicSubnetACIDR
          - PublicSubnetBCIDR
          - PrivateSubnetACIDR
          - PrivateSubnetBCIDR
          - DatabaseSubnetACIDR
          - DatabaseSubnetBCIDR

Parameters:
  Environment:
    Type: String
    Default: "Test-Prod"

  VPCBlock:
    Type: String
    Default: '10.0.0.0/16'
  
  VPCBlock2:
    Type: String
    Default: '192.0.0.0/16'

  PublicSubnetACIDR: 
    Type: String
    Default: '10.0.10.0/24'
    Description: "Public Subnet-A CIDR"

  PublicSubnetBCIDR: 
    Type: String
    Default: '10.0.20.0/24'
    Description: "Public Subnet-B CIDR"
  
  PrivateSubnetACIDR: 
    Type: String
    Default: '10.0.11.0/24'
    Description: "Private Subnet-A CIDR"
    
  PrivateSubnetBCIDR: 
    Type: String
    Default: '10.0.21.0/24'
    Description: "Public Subnet-B CIDR"

  DatabaseSubnetACIDR: 
    Type: String
    Default: '192.0.30.0/24'
    Description: "Database Subnet-A CIDR"
    
  DatabaseSubnetBCIDR: 
    Type: String
    Default: '192.0.31.0/24'
    Description: "Database Subnet-B CIDR"    

Resources:
#============= VPC ==================
  VPC:
    Type: AWS::EC2::VPC
    Properties:                              # Attach Primary CIDR Block
      CidrBlock: !Ref VPCBlock             
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Ref Environment

  VPCCidrBlock2:                             # Attach Secondary CIDR Block
    Type: "AWS::EC2::VPCCidrBlock"
    DependsOn: VPC
    DeletionPolicy: Delete
    Properties: 
      CidrBlock: !Ref VPCBlock2
      VpcId: !Ref VPC          
      
#====== Internet Gateway =======
  GatewayInternet:
    Type: "AWS::EC2::InternetGateway"
    Properties: 
      Tags:
        - Key: Name
          Value: !Ref Environment

  GatewayAttachmentInternet:                       # Attachment IGW to VPC
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties:
      VpcId:  !Ref VPC
      InternetGatewayId: !Ref GatewayInternet
          
{
  "typeName": "AWS::Amplify::Domain",
  "description": "The AWS::Amplify::Domain resource allows you to connect a custom domain to your app.",
  "additionalProperties": false,
  "properties": {
    "AppId": {
      "type": "string",
      "minLength": 1,
      "maxLength": 20,
      "pattern": "d[a-z0-9]+"
    },
    "Arn": {
      "type": "string",
      "maxLength": 1000,
      "pattern": "(?s).*"
    },
    "AutoSubDomainCreationPatterns": {
      "type": "array",
      "uniqueItems": false,
      "items": {
        "type": "string",
        "minLength": 1,
        "maxLength": 2048,
        "pattern": "(?s).+"
      }
    },
    "AutoSubDomainIAMRole": {
      "type": "string",
      "pattern": "^$|^arn:.+:iam::\\d{12}:role.+",
      "maxLength": 1000
    },
    "CertificateRecord": {
      "type": "string",
      "maxLength": 1000
    },
    "DomainName": {
      "type": "string",
      "Description": The DNS name of an existing Amazon Route 53 hosted zone
      "pattern": "^(((?!-)[A-Za-z0-9-]{0,62}[A-Za-z0-9])\\.)+((?!-)[A-Za-z0-9-]{1,62}[A-Za-z0-9])(\\.)?$",
      "maxLength": 255
    },
    "DomainStatus": {
      "type": "string"
    },
    "EnableAutoSubDomain": {
      "type": "boolean"
    },
    "StatusReason": {
      "type": "string",
      "maxLength": 1000
    },
    "SubDomainSettings": {
      "type": "array",
      "uniqueItems": false,
      "items": {
        "$ref": "#/definitions/SubDomainSetting"
      },
      "maxItems": 255
    }
    
  },
  "definitions": {
    "SubDomainSetting": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "Prefix": {
          "type": "string",
          "maxLength": 255,
          "pattern": "(?s).*"
        },
        "BranchName": {
          "type": "string",
          "minLength": 1,
          "maxLength": 255,
          "pattern": "(?s).+"
        }
      },
      "required": [
        "Prefix",
        "BranchName"
      ]
    }
  },
  "required": [
    "AppId",
    "DomainName",
    "SubDomainSettings"
  ],
  "primaryIdentifier": [
    "/properties/Arn"
  ],
  "createOnlyProperties": [
    "/properties/AppId",
    "/properties/DomainName"
  ],
  "readOnlyProperties": [
    "/properties/Arn",
    "/properties/DomainStatus",
    "/properties/StatusReason",
    "/properties/CertificateRecord"
  ],
  "handlers": {
    "create": {
      "permissions": [
        "amplify:CreateDomainAssociation",
        "route53:ListHostedZones",
        "route53:ChangeResourceRecordSets",
        "iam:PassRole",
        "amplify:TagResource"
      ]
    },
    "delete": {
      "permissions": [
        "amplify:DeleteDomainAssociation",
        "iam:PassRole",
        "amplify:DeleteDomainAssociation"
      ]
    },
    "list": {
      "permissions": [
        "amplify:ListDomainAssociations",
        "iam:PassRole",
        "amplify:ListTagsForResource"
      ]
    },
    "read": {
      "permissions": [
        "amplify:GetDomainAssociation",
        "route53:ListHostedZones",
        "iam:PassRole",
        "amplify:ListTagsForResource"
      ]
    },
    "update": {
      "permissions": [
        "amplify:UpdateDomainAssociation",
        "route53:ListHostedZones",
        "route53:ChangeResourceRecordSets",
        "iam:PassRole",
        "amplify:ListTagsForResource",
        "amplify:TagResource",
        "amplify:UntagResource"
      ]
    }
  }
}
